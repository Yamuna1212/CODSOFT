# -*- coding: utf-8 -*-
"""codsoft_Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17CMDOForDR4DYKCno68NlOTZWi2xkFQQ
"""

# Tic-Tac-Toe with Unbeatable AI
import math

# Function to initialize the game board
def initialize_board():
    return [[" " for _ in range(3)] for _ in range(3)]

# Function to display the game board
def display_board(board):
    print("\n".join([" | ".join(row) for row in board]))
    print()

# Function to check for a winner
def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] != " ":
            return row[0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != " ":
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != " ":
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != " ":
        return board[0][2]
    return None

# Function to check if the board is full
def is_full(board):
    return all(board[row][col] != " " for row in range(3) for col in range(3))

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == "O":  # AI wins
        return 10 - depth
    elif winner == "X":  # Human wins
        return depth - 10
    elif is_full(board):  # Draw
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[row][col] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[row][col] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# Function to find the best move for the AI
def find_best_move(board):
    best_val = -math.inf
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "O"
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[row][col] = " "
                if move_val > best_val:
                    best_val = move_val
                    best_move = (row, col)
    return best_move

# Main game loop
def play_game():
    board = initialize_board()
    print("Welcome to Tic-Tac-Toe! You are 'X', and the AI is 'O'.")
    display_board(board)

    while True:
        # Human player's turn
        while True:
            try:
                row, col = map(int, input("Enter your move (row and column: 0 1 2): ").split())
                if board[row][col] == " ":
                    board[row][col] = "X"
                    break
                else:
                    print("Invalid move. Cell already occupied.")
            except (ValueError, IndexError):
                print("Invalid input. Please enter row and column as two numbers between 0 and 2.")

        display_board(board)

        if check_winner(board):
            print(f"Player {check_winner(board)} wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI's turn
        print("AI is making its move...")
        best_move = find_best_move(board)
        board[best_move[0]][best_move[1]] = "O"
        display_board(board)

        if check_winner(board):
            print(f"Player {check_winner(board)} wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

# Start the game
play_game()