# -*- coding: utf-8 -*-
"""codsoft_Task3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-zWjh0NoNrMWwyjBefGrECj5BK4_fsQ
"""

# Import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Function to load the dataset
def load_data(file_path):
    # Load the CSV file into a DataFrame
    books = pd.read_csv("/content/books.csv")

    # Check for missing values and fill them if necessary
    books = books.fillna('')

    # Combine columns 'Title', 'Author', and 'Genre' to form a combined feature for recommendation
    books['combined_features'] = books['Title'] + ' ' + books['Author'] + ' ' + books['Genre']

    return books

# Function to create a TF-IDF matrix and compute cosine similarity
def create_cosine_similarity(books):
    # Initialize TF-IDF Vectorizer
    tfidf = TfidfVectorizer(stop_words='english')

    # Transform combined features into a TF-IDF matrix
    tfidf_matrix = tfidf.fit_transform(books['combined_features'])

    # Compute the cosine similarity between books
    cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

    return cosine_sim

# Function to recommend books based on a given title
def recommend_books(title, books, cosine_sim, num_recommendations=3):
    if title not in books['Title'].values:
        return f"'{title}' is not found in the dataset."

    # Get the index of the given book title
    idx = books[books['Title'] == title].index[0]

    # Get the similarity scores for all books with the given book
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the books based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the indices of the top recommended books (excluding the input book)
    sim_scores = sim_scores[1:num_recommendations + 1]
    book_indices = [i[0] for i in sim_scores]

    # Return the recommended book titles
    return books['Title'].iloc[book_indices]

# Example usage
# Load the dataset (provide the path to your CSV file)
file_path = '/content/books.csv'  # Update with the actual file path
books = load_data(file_path)

# Create cosine similarity matrix
cosine_sim = create_cosine_similarity(books)

# Get recommendations for a specific book title
book_title = "Data Smart"  # Replace with a title from your dataset
recommended_books = recommend_books(book_title, books, cosine_sim)

# Print the recommendations
print(f"Recommended books similar to '{book_title}':")
for rec in recommended_books:
    print(f"- {rec}")